c
@appointments = @patient.appointments
c
@patient = Patient.find(params[:patient_id])
c
body
c
n
 user = User.find_by(email: params[:email], password: params[:password])
c
response.body
response
c
token = encode_user_data({ user_data: user.id })
user && user.password == params[:password] && allowed_roles.include?(user.role.to_sym)
allowed_roles.include?(user.role.to_sym)
user && user.password == params[:password]
user 
user
user = User.find_by(email: params[:email], password: params[:password])
c
response.body
response
response.body
body
c
body["message"]
body
c
response
c
token
encode_user_data({ user_data: user.id })
user.save
user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
n
c
token = encode_user_data(1)
token = encode_user_data(user_id: user.id)
c
encode_user_data(1)
encode_user_data(user.id)
encode_user_data(1)
c
JsonWebToken.encode(1)
 let(:token) {JsonWebToken.encode(user.id)}
token
c
render json: { token: token }
encode_user_data({ user_data: user.id })
user.save
 user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
n
c
render json: { token: token }
json: { token: token }
encode_user_data({ user_data: user.id })
user.save
 user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
token
n
c
user
n
 user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
params
user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
 user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
 user = User.new(email: params[:email], password: params[:password], role:params[:role], name: params[:name])
c
JSON.parse(response.body)
c
user.save
user
n
c
existing_user = User.find_by(email: email)
c
n
 existing_user
n
c
params[:name]
params[:role]
params[:password]
params[:email]
c
a.save
c
self.status ||= :pending
self.status
c
@client.messages
@client
@client = Twilio::REST::Client.new(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
c
TWILIO_AUTH_TOKEN
WILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
c
@client = Twilio::REST::Client.new(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
exit
end
to_phone_number
return TWILIO_FROM_PHONE if Rails.env.development?
byebug
def to(to_phone_number)
private 
end
puts message.sid
)
to: to(@to_phone_number)
from: TWILIO_FROM_PHONE,
body: @body,
message = @client.messages.create(
@client = Twilio::REST::Client.new(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
byebug
def call 
end
@to_phone_number=to_phone_number
@body=body
def initialize(body: ,to_phone_number:)
TWILIO_TEST_PHONE=  '+919340994804'
TWILIO_FROM_PHONE= '+16187871747'
TWILIO_AUTH_TOKEN= 'bb081b50f0eeab3a56a3ce635cc262ac'
TWILIO_ACCOUNT_SID= 'AC899a750c035c55083a5c9a5d2109588a'
class SmsService
module Twilio
# Twilio::SmsService.new(body: "hello from rails", to_phone_number: '+).call
c
to_phone_number
c
@client.messages.create
@client.messages
@client
@client = Twilio::REST::Client.new(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
Twilio::SmsService.new(body: "hello from rails", to_phone_number: '+9755573314').call
c
@client = Twilio::REST::Client.new(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
TWILIO_AUTH_TOKEN
TWILIO_ACCOUNT_SID
c
params[:role]
params[:email]
c
existing_user && existing_user.id != id
existing_user = User.find_by(email: email)
existing_user = User.find_by(email: email
email
c
params[:role]
params[:password]
params[:email]
c
existing_user = User.find_by(email: email)
email
c
params[:role]
params[:password]
params[:email]
c
params[:role]
params[:password]
params[:email]
c
params[:role]
params[:password]
params[:email]
c
@user = user
user
c
@user = user
@user
user
c
appointment = @patient.appointments.build(appointment_params)
@patient.appointments
@patient 
c
params[:patient_id]
c
@patient
c
params["patient_id"]
params["patient_id]
c
@patient
c
params[:patient_id]
c
appointment_time.hour < 7 || appointment_time.hour >= 11
appointment_time.hour
appointment_time
c
appointment = @patient.appointments.build(appointment_params)
c
params[:patient_id]
parsms[:patient_id]
parmas[:patient_id]
c
#   endc
#     end
#       errors.add(:duration_in_minutes, "should be between 30 and 120 minutes")
#     if duration_in_minutes < 30 || duration_in_minutes > 120
#     return unless appointment_time && duration_in_minutes
def valid_duration
duration
appointment_time
c
#   endc
#     end
#       errors.add(:duration_in_minutes, "should be between 30 and 120 minutes")
#     if duration_in_minutes < 30 || duration_in_minutes > 120
#     return unless appointment_time && duration_in_minutes
def valid_duration
appointment_time
Appointment.exists?
c
appointment_time 
c
appointment = @patient.appointments.build(appointment_params)
@patient.appointments.build
@patient.appointments
@patient
c
params["patient_id"]
params["patient"]
params["patient]
c
params[:patient_id]
params[:patient]
params[:email]
parmas[:email]
c
params[:patient_id]
c
duplicate_appointments = patient.appointments.where(appointment_time: appointment_time)
patient.appointments
patient
appointment_time.blank?
c
appointment_time.hour.between?(11, 6)
appointment_time.blank?
